{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#Importing All the needed libraries\n",
        "import os #To handle files path\n",
        "from flask import Flask, render_template, redirect, request, g, session #Main Flask\n",
        "from flask_login import LoginManager, UserMixin, current_user, login_user, login_required #To create the Login\n",
        "from flask_sqlalchemy import SQLAlchemy #SQL Alchemy to create the database\n",
        "\n",
        "#Initial Configurations\n",
        "files_path = os.path.dirname(os.path.abspath(__file__)) #Setting the path of the main directory\n",
        "database_main_file = \"sqlite:///{}\".format(os.path.join(files_path, \"primary.db\")) #The path of the main database\n",
        "app = Flask(__name__)\n",
        "app.config[\"SQLALCHEMY_DATABASE_URI\"] = database_main_file\n",
        "app.secret_key = \"A06748581\"\n",
        "login = LoginManager()\n",
        "login.init_app(app)\n",
        "login.login_view = 'login'\n",
        "db = SQLAlchemy(app)\n",
        "\n",
        "#Creating the primary database\n",
        "class Task(db.Model): # A table to store all the tasks with a unique id as an identifier\n",
        "    __tablename__ = 'Task'\n",
        "    id = db.Column(db.Integer,primary_key=True)\n",
        "    title = db.Column(db.String(80), unique=True, nullable=False, primary_key=True)\n",
        "    status = db.Column(db.String(80), nullable=False)\n",
        "    user_id = db.Column(db.Integer, db.ForeignKey('User.id'))\n",
        "    def __repr__(self):\n",
        "        return \"<Title: {}>\".format(self.title)\n",
        "\n",
        "class User(UserMixin, db.Model): # A table to store users data\n",
        "    __tablename__ = 'User'\n",
        "    id = db.Column(db.Integer, primary_key=True)\n",
        "    username = db.Column(db.String(200))\n",
        "    password = db.Column(db.String(200))\n",
        "    task_id = db.relationship('Task', backref='user', lazy='dynamic') #Creating the relation between the two databases\n",
        "    def __repr__(self):\n",
        "        return \"<Username: {}>\".format(self.username)\n",
        "\n",
        "# Generating the database with the two tables\n",
        "db.create_all()\n",
        "db.session.commit()\n",
        "\n",
        "\n",
        "#The primary functions\n",
        "\n",
        "\"\"\"\n",
        "This function redirects users to the Login page \n",
        "\"\"\"\n",
        "@app.route('/', methods=['GET', 'POST'])\n",
        "def welcome():\n",
        "    return redirect('login')\n",
        "\n",
        "@login.user_loader\n",
        "def load_user(id):\n",
        "    return User.query.get(int(id))\n",
        "\n",
        "\"\"\"\n",
        "This the primary function responsible for registering new users \n",
        "This function assures that the password has at least 8 figures \n",
        "This function returns an error if the password does not meet the requirements\n",
        "This function returns an error if the password do not match\n",
        "This function returns an error if the username already exists in the database   \n",
        "\"\"\"\n",
        "@app.route('/register', methods=['GET','POST'])\n",
        "def register():\n",
        "    if request.method == 'POST':\n",
        "        user = User.query.filter_by(username=request.form['username']).first()\n",
        "        if user is not None:\n",
        "            error = 'This username already exists! please choose a new username'\n",
        "            return render_template('register.html', error=error)\n",
        "        if len(request.form['password']) < 8:\n",
        "            error = 'Your password should be at least 8 symbols long. Please, try again.'\n",
        "            return render_template('register.html', error=error)\n",
        "        if request.form['password'] != request.form['repeat']:\n",
        "            error = 'Passwords do not match. Please, try again.'\n",
        "            return render_template('register.html', error=error)\n",
        "\n",
        "        new_user = User(username=request.form['username'], password=request.form['password'])\n",
        "        db.session.add(new_user)\n",
        "        db.session.commit()\n",
        "        return redirect(\"/login\")\n",
        "    elif request.method == 'GET':\n",
        "        return render_template('register.html')\n",
        "\n",
        "\n",
        "\"\"\"\n",
        "This function is responsible for logging users in to their personal kanban board \n",
        "This function validates users credentials, if the user is registered it redirects to the Kanban board\n",
        "If the user is not registered it displays an error that the user is not registered\n",
        "\"\"\"\n",
        "@app.route('/login', methods=['GET', 'POST'])\n",
        "def login():\n",
        "    if request.method == 'POST':\n",
        "        user = User.query.filter_by(username=request.form['username'], password=request.form['password']).first()\n",
        "        if user is None:\n",
        "            error = 'The password or the username you  entered is not correct!'\n",
        "            return render_template('login.html', error=error)\n",
        "        login_user(user)\n",
        "        return redirect(\"/main\")\n",
        "    elif request.method == 'GET':\n",
        "        return render_template('login.html')\n",
        "\n",
        "\"\"\"\n",
        "This function is responsible for logging users out\n",
        "\"\"\"\n",
        "@app.route('/logout', methods=['GET', 'POST'])\n",
        "def logout():\n",
        "    session.pop('logged_in', None)\n",
        "    return redirect('login')\n",
        "\n",
        "\"\"\"\n",
        "This is the primary function responsible for displaying the tasks \n",
        "This function does not allow duplicate tasks to exist \n",
        "\n",
        "\"\"\"\n",
        "@app.route('/main', methods=[\"GET\", \"POST\"])\n",
        "@login_required\n",
        "def home():\n",
        "    g.user = current_user\n",
        "    tasks = None\n",
        "    error = None\n",
        "    if request.form:\n",
        "        try:\n",
        "            if request.form.get(\"title\") in [task.title for task in Task.query.all()]:\n",
        "                error = \"This task already exists.\"\n",
        "            else:\n",
        "                task = Task(id = 1, title=request.form.get(\"title\"), status=request.form.get(\"status\"), user_id = g.user.id)\n",
        "                tasks = Task.query.all()\n",
        "                db.session.add(task)\n",
        "                db.session.commit()\n",
        "        except Exception as e:\n",
        "            print(\"Failed to add task\")\n",
        "            print(e)\n",
        "    tasks = Task.query.filter_by(user_id=g.user.id).all()\n",
        "    todo = Task.query.filter_by(status='todo',user_id=g.user.id).all()\n",
        "    doing = Task.query.filter_by(status='doing',user_id=g.user.id).all()\n",
        "    done = Task.query.filter_by(status='done',user_id=g.user.id).all()\n",
        "    return render_template(\"index.html\", error=error, tasks=tasks, todo=todo, doing=doing, done=done, myuser=current_user)\n",
        "\n",
        "@app.route(\"/update\", methods=[\"POST\"])\n",
        "def update():\n",
        "    try:\n",
        "        newstatus = request.form.get(\"newstatus\")\n",
        "        name = request.form.get(\"name\")\n",
        "        task = Task.query.filter_by(title=name).first()\n",
        "        task.status = newstatus\n",
        "        db.session.commit()\n",
        "    except Exception as e:\n",
        "        print(\"Couldn't update task status\")\n",
        "        print(e)\n",
        "    return redirect(\"/main\")\n",
        "\n",
        "@app.route(\"/delete\", methods=[\"POST\"])\n",
        "def delete():\n",
        "    title = request.form.get(\"title\")\n",
        "    task = Task.query.filter_by(title=title).first()\n",
        "    db.session.delete(task)\n",
        "    db.session.commit()\n",
        "    return redirect(\"/main\")\n",
        "\n",
        "\n",
        "#Running the application\n",
        "if __name__ == \"__main__\":\n",
        "    app.run(debug=True)"
      ],
      "metadata": {
        "id": "2GzrSYnuKyoR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}